Veskeno needs to be able to fluently (and, above all,
deterministically) express the ingredients of software.  But what are
those ingredients?  What are the things we want to be able to express?

What does normal code consist of?
---------------------------------

I thought I’d go and look at a variety of random code in different
languages to get an idea of what random code looks like.  After all,
maybe my own personal preferences and practices aren’t typical!  Maybe
I tend to focus on some small niche area of the wide world of
programming.  After all, I do write code mostly in Python nowadays.
For better or worse, I’m focusing on languages I do know pretty well.
I looked at random bits of code in 12 languages.

[Modulecounts][0] says npm (JS) is growing at 940 modules a day, Maven
Central (Java) 234, PyPI 217, nuget (.NET) 181, Packagist (PHP) 102,
crates.io (Rust) 58, and RubyGems 19.  Everything else is below 10 new
modules per day.  I sampled the top three of these, plus another 9
that aren’t hip, so hopefully I’m getting a pretty broad range of
programming styles.  [TIOBE][1] gives C, Java, Python, C++, C# (.NET),
Visual Basic (.NET), JS, PHP, SQL, and assembly as its top 10; I
included five of these including the top four; [GitHub][2] ranks JS,
Python, Java, TypeScript, C#, PHP, C++, C, shell, and Ruby, and I
included six of these, including the top three.  PHP and C# are the
big omissions.

[0]: http://www.modulecounts.com/
[1]: https://www.tiobe.com/tiobe-index/
[2]: https://octoverse.github.com/

### Scheme ###

First consider this chunk of code from Ur-Scheme:

    (define interned-symbol-list '())
    (define (intern symbol)
      (interning symbol interned-symbol-list))
    (define (interning symbol symlist)
      (cond ((null? symlist) 
             ;; XXX isn't this kind of duplicative with the global variables stuff?
             (set! interned-symbol-list 
                   (cons (list symbol (new-label)) interned-symbol-list))
             (car interned-symbol-list))
            ((eq? symbol (caar symlist)) (car symlist))
            (else (interning symbol (cdr symlist)))))
    (define (symbol-value symbol) (cadr (intern symbol)))

I think this is more or less normal code.  It has some definitions, an
assignment, a loop, a mutable variable, some immutable arguments, some
comparisons, some conditionals, some invocations of some primitive
functionality (mostly to access container objects), and some calls to
high-level functions.  It contains an unusually small amount of
mutation (one assignment), an unusually small number of constants
(just one, nil), and an unusually small amount of sequencing (just 
the sequence of two consequents of `null? symlist` and the top-level
sequence of definitions).  You can’t tell from looking, but it invokes
two macros: both `define` and `cond` are defined as macros in
Ur-Scheme.

### Python ###

Here’s some more code that is also pretty normal, from bzrlib.plugins.gtk:

    class LockDialog(Gtk.Dialog):

        def __init__(self, branch):
            super(LockDialog, self).__init__()

            self.branch = branch

            self.set_title('Lock Not Held')

            self.get_content_area().add(
                Gtk.Label(label=(
                    'This operation cannot be completed as '
                    'another application has locked the branch.')))

            self.add_button('Break Lock', RESPONSE_BREAK)
            self.add_button(Gtk.STOCK_CANCEL, RESPONSE_CANCEL)

            self.get_content_area().show_all()

This has a class definition with inheritance and a constructor, a
superclass constructor invocation, some arguments, some references to
free variables (imported from other modules in this case), some
constant strings, a sequence of method calls, and even an object
instantiation and a named argument.  The only primitives used, other
than those mentioned above, are attribute access.

### C ###

Here’s some slightly less normal code, from gpsd/json.c:

    json_debug_trace((1, "JSON parse of '%s' begins.\n", cp));

    /* parse input JSON */
    for (; *cp != '\0'; cp++) {
	json_debug_trace((2, "State %-14s, looking at '%c' (%p)\n",
			  statenames[state], *cp, cp));
	switch (state) {
	case init:
	    if (isspace(*cp))
		continue;
	    else if (*cp == '{')
		state = await_attr;
	    else {
		json_debug_trace((1,
				  "Non-WS when expecting object start.\n"));
		return JSON_ERR_OBSTART;
	    }
	    break;
	case await_attr:
	    if (isspace(*cp))
		continue;

I would have included the whole function, but it's 454 lines long.
This includes three calls to a C macro, which invokes a variadic
function called `json_trace`; a couple of character constants; a loop;
a couple of integer constants; three string constants; an assignment;
a passel of sequencing; pointer arithmetic, including mutation by
postincrement; indexing into an array by the enum; a switch statement
on an enum; some early exits; lots of primitive operations; and a
couple of invocations of `isspace`, from the standard library, which
could be a subroutine but is probably a macro.

### JS ###

Here’s some more fairly normal code, this time from a JS version of
Python’s `bisect` binary search library, included in a package called
“crossfilter”.  I’ve removed the comments but they already didn’t say
who the author was:

    function bisect_by(f) {
      function bisectLeft(a, x, lo, hi) {
        while (lo < hi) {
          var mid = lo + hi >>> 1;
          if (f(a[mid]) < x) lo = mid + 1;
          else hi = mid;
        }
        return lo;
      }

      function bisectRight(a, x, lo, hi) {
        while (lo < hi) {
          var mid = lo + hi >>> 1;
          if (x < f(a[mid])) hi = mid;
          else lo = mid + 1;
        }
        return lo;
      }

      bisectRight.right = bisectRight;
      bisectRight.left = bisectLeft;
      return bisectRight;
    }

This has some functions with parameters; conditionals; a couple of
loops; comparisons; a few assignments; a little bit of arithmetic
(unlike the others!), including a bit shift; a higher-order function
taking a functional argument and returning closures; some assignments
to attributes; and indexing into arrays.

### Java ###

Here’s some more code that isn’t very normal at all, from Mako, “a
simple stack-based virtual game console, designed to be as simple as
possible to implement”, but mostly another copy of Forth:

	public void tick() {
		int o = m[m[PC]++];
		int a, b;

		switch(o) {
			case OP_CONST  :  push(m[m[PC]++]);                       break;
			case OP_CALL   : rpush(m[PC]+1); m[PC] = m[m[PC]];        break;
			case OP_JUMP   :                 m[PC] = m[m[PC]];        break;
			case OP_JUMPZ  : m[PC] = pop()==0 ? m[m[PC]] : m[PC]+1;   break;
			case OP_JUMPIF : m[PC] = pop()!=0 ? m[m[PC]] : m[PC]+1;   break;
			case OP_LOAD   : push(load(pop()));                       break;
			case OP_STOR   : stor(pop(),pop());                       break;
			case OP_RETURN : m[PC] = rpop();                          break;
			case OP_DROP   : pop();                                   break;
			case OP_SWAP   : a = pop(); b = pop(); push(a); push(b);  break;
			case OP_DUP    : push(m[m[DP]-1]);                        break;
			case OP_OVER   : push(m[m[DP]-2]);                        break;
			case OP_STR    : rpush(pop());                            break;
			case OP_RTS    : push(rpop());                            break;
			case OP_ADD    : a = pop(); b = pop(); push(b+a);         break;
			case OP_SUB    : a = pop(); b = pop(); push(b-a);         break;
			case OP_MUL    : a = pop(); b = pop(); push(b*a);         break;
			case OP_DIV    : a = pop(); b = pop(); push(b/a);         break;
			case OP_MOD    : a = pop(); b = pop(); push(mod(b,a));    break;
			case OP_AND    : a = pop(); b = pop(); push(b&a);         break;
			case OP_OR     : a = pop(); b = pop(); push(b|a);         break;
			case OP_XOR    : a = pop(); b = pop(); push(b^a);         break;
			case OP_NOT    : push(~pop());                            break;
			case OP_SGT    : a = pop(); b = pop(); push(b>a ? -1:0);  break;
			case OP_SLT    : a = pop(); b = pop(); push(b<a ? -1:0);  break;
			case OP_NEXT   : m[PC] = --m[m[RP]-1]<0?m[PC]+1:m[m[PC]]; break;
		}
	}

This has a method definition; a switch statement; some constants; a
bunch of method calls; a bunch of arithmetic primitives (including
bitwise operators, which we haven't seen before); indexing into
arrays; conditionals; lots of assignment and other mutation; and a
number of numeric constants.

Here's some more normal code, also in Java, reformatted from the
OpenJDK; this code is compilation output from some kind of macro
processing, and it implements a FIFO of double-precision
floating-point numbers:

    public DoubleBuffer asReadOnlyBuffer() {
        return new HeapDoubleBufferR(hb, this.markValue(), this.position(),
                                     this.limit(), this.capacity(), offset);
    }

    protected int ix(int i) { return i + offset; }
    public double get() { return hb[ix(nextGetIndex())]; }
    public double get(int i) { return hb[ix(checkIndex(i))]; }

    public DoubleBuffer get(double[] dst, int offset, int length) {
        checkBounds(offset, length, dst.length);
        if (length > remaining())
            throw new BufferUnderflowException();
        System.arraycopy(hb, ix(position()), dst, offset, length);
        position(position() + length);
        return this;
    }

This contains a number of method calls with varying protection, lots
of type declarations (including methods overridden by type signature),
lots of method calls, a little attribute access, some implicit
self-instance-variable access, object instantiation, array indexing, a
little bit of arithmetic (two additions and a comparison), a
conditional, some mutation, and an exception.

### Perl ###

Here’s some more pretty normal code, this time in Perl, from
Net::DBus::Binding::Message::Error:

    =item my $error = Net::DBus::Binding::Message::Error->new(
          replyto => $method_call, name => $name, description => $description);

    Creates a new message, representing an error which occurred during
    the handling of the method call object passed in as the C<replyto>
    parameter. The C<name> parameter is the formal name of the error
    condition, while the C<description> is a short piece of text giving
    more specific information on the error.

    =cut

    sub new {
        my $proto = shift;
        my $class = ref($proto) || $proto;
        my %params = @_;

        my $replyto = exists $params{replyto} ? $params{replyto} : die "replyto parameter is required";

        my $msg = exists $params{message} ? $params{message} :
            Net::DBus::Binding::Message::Error::_create
            (
             $replyto->{message},
             ($params{name} ? $params{name} : die "name parameter is required"),
             ($params{description} ? $params{description} : die "description parameter is required"));

        my $self = $class->SUPER::new(message => $msg);

        bless $self, $class;

        return $self;
    }

This is a method definition including properly marked-up
documentation.  It contains five conditionals, six local variables, no
mutation, three exceptions, a bunch of hash table lookups by string
(like Python, Perl uses string-indexed hash tables instead of record
types), a method call (on the superclass), deeply nested namespaces,
and lots and lots of invocations of primitives, including `shift`,
`ref`, `exists`, `@_`, and `bless`.  It has a lot of string literals
if we count the parameter/attribute names and the package names, but
otherwise the only constants are some string literals for error
messages.

### Elisp ###

Here’s some more pretty normal Lisp code, this time in Elisp, from
Eric Ludlam’s Speedbar package:

    (defun speedbar-add-supported-extension (extension)
      "Add EXTENSION as a new supported extension for speedbar tagging.
    This should start with a `.' if it is not a complete file name, and
    the dot should NOT be quoted in with \\.  Other regular expression
    matchers are allowed however.  EXTENSION may be a single string or a
    list of strings."
      (interactive "sExtension: ")
      (if (not (listp extension)) (setq extension (list extension)))
      (while extension
        (if (member (car extension) speedbar-supported-extension-expressions)
            nil
          (setq speedbar-supported-extension-expressions
                (cons (car extension) speedbar-supported-extension-expressions)))
        (setq extension (cdr extension)))
      (setq speedbar-file-regexp (speedbar-extension-list-to-regex
                                  speedbar-supported-extension-expressions)))

This function contains two conditionals, four assignments, a loop,
properly formatted documentation, one to three constants (nil and two
strings) depending on how you count, lots of calls to primitives, and
a call to another function in the same package.

### Lua ###

Here’s some more pretty normal code, this time in Lua from NMap,
slightly reformatted.  This is from Patrik Karlsson’s interface to get
packets from WinPcap:

      -- Holds the two supported authentication mechanisms PWD and NULL
      Authentication = {
        PWD = {
          new = function(self, username, password)
            local o = { 
              type = 1,
              username = username,
              password = password,
            }
            setmetatable(o, self)
            self.__index = self
            return o
          end,

          __tostring = function(self)
            local DUMMY = 0
            return bin.pack(">SSSSAA", self.type, DUMMY, #self.username,
                            #self.password, self.username, self.password)
          end,
        },

Her we have three levels of nesting of Lua tables (dictionaries),
`...Authentication.PWD.new`.  There are a couple of functions (which
are methods on a metatable object; one is a constructor), a couple of
local variable declarations, an assignment to the `__index` attribute,
a few accesses to attributes, invocation of the `#` length primitive,
a call to a function from another module, and the construction of a
new table `o`.  There are three constants, one of which is a string in
a binary serialization little language.  There is a sequence of four
statements in `new`.

### C++ ###

Here’s some more much less normal code, this time in C++, from
OpenSCAD’s ColorModule (slightly reformatted):

    #include "colormap.h"
    AbstractNode *ColorModule::instantiate(const Context *ctx,
       const ModuleInstantiation *inst,
       const EvalContext *evalctx)
    const
    {
       ColorNode *node = new ColorNode(inst);

       node->color[0] = node->color[1] = node->color[2] = -1.0;
       node->color[3] = 1.0;

       AssignmentList args;

       args += Assignment("c", NULL), Assignment("alpha", NULL);

       Context c(ctx);
       c.setVariables(args, evalctx);

       Value v = c.lookup_variable("c");
       if (v.type() == Value::VECTOR) {
          for (size_t i = 0; i < 4; i++) {
             node->color[i] = i < v.toVector().size()
                ? v.toVector()[i].toDouble()
                : 1.0;
             if (node->color[i] > 1)
                PRINTB_NOCACHE("WARNING: color() expects numbers between"
                               " 0.0 and 1.0. Value of %.1f is too large.",
                                node->color[i]);
          }
       } else if (v.type() == Value::STRING) {
          std::string colorname = v.toString();

Here we see an `#include`, (the beginning of) a method definition,
lots of parameters and other local variables, lots of type
declarations, some object instantiations, lots of accesses to
attributes (“instance variables” or “fields”), constness, lots of
constants (numeric, string, and enum), arithmetic (using postincrement
mutation) to step through an array and check numeric ranges, a loop,
four conditionals, pseudo-RAII (`Context`’s constructors and
destructors maintain a context stack for `lookup_variable` — it isn’t
so much that they acquire resources so much as that they automatically
release them), operator overloading, lots of method calls, array
indexing, macros, and floating point.

### Bourne shell ###

Here’s a shell script from eglibc’s test suite:

    common_objpfx=$1
    run_program_prefix=$2
    objpfx=$3

    LC_ALL=C
    export LC_ALL

    # Create the domain directories.
    mkdir -p ${objpfx}domaindir/de_DE/LC_MESSAGES
    mkdir -p ${objpfx}domaindir/fr_FR/LC_MESSAGES
    # Populate them.
    msgfmt -o ${objpfx}domaindir/de_DE/LC_MESSAGES/multithread.mo tst-gettext4-de.po
    msgfmt -o ${objpfx}domaindir/fr_FR/LC_MESSAGES/multithread.mo tst-gettext4-fr.po

    GCONV_PATH=${common_objpfx}iconvdata
    export GCONV_PATH
    LOCPATH=${common_objpfx}localedata
    export LOCPATH

    ${run_program_prefix} ${objpfx}tst-gettext4 > ${objpfx}tst-gettext4.out

    exit $?

This has very little in common with the other examples, although we
can identify parameters (`$1`, `$2`), variables, sequencing, string
constants, primitives (`export`, `exit`), invocation of library
functionality analogous to library functions (`mkdir`, `msgfmt`),
containers of data (directories), and nested namespaces.

It’s not entirely coincidental that this shell script lacks
conditionals, loops, and subroutines (other than the whole script).
It’s pretty common for shell scripts to be just straight sequences
like that: just a sequence of mutations, slightly parameterized.

### Tcl ###

Here’s some fairly normal Tcl code from the ArsDigita Community System,
somewhat reformatted:

    # calendar-defs.tcl
    # by philg@mit.edu late 1998
    # for the /calendar system documented at /doc/calendar.html 

    proc calendar_system_owner {} {
        return [ad_parameter SystemOwner calendar [ad_system_owner]]
    }

    proc calendar_footer {} {
        return [ad_footer [calendar_system_owner]]
    }

    ns_share ad_user_contributions_summary_proc_list

    if { ![info exists ad_user_contributions_summary_proc_list]
       || [util_search_list_of_lists $ad_user_contributions_summary_proc_list "/calendar postings" 0] 
          == -1 } {
        lappend ad_user_contributions_summary_proc_list \
            [list "/calendar postings" calendar_user_contributions 0]
    }

Again we see invocations of “primitives” (`if`, `lappend`, `list`);
two subroutine definitions (which could have had parameters but
don’t); variables; invocations of non-primitive functionality like
`util_search_list_of_lists` and `ad_parameter`; string constants (all
over the place), some of which are also integer constants; sequencing;
and a couple of conditionals.

Tcl is kind of close to shell scripts in a lot of ways — its only data
type is ostensibly strings — though it’s imported some aspects of
Lisp.  The ACS codebase is probably less shell-scripty than most Tcl
codebases.  I think of this script from the OpenTitan project as being
more typical of Tcl:

    # Copyright lowRISC contributors.
    # Licensed under the Apache License, Version 2.0, see LICENSE for details.
    # SPDX-License-Identifier: Apache-2.0

    source ./tcl/sta_common.tcl

    set overall_rpt_file "${lr_synth_rpt_out}/timing/overall"
    timing_report $lr_synth_clk_input $overall_rpt_file $lr_synth_sta_overall_paths

    set lr_synth_path_group_list [list]

    setup_path_groups $lr_synth_inputs $lr_synth_outputs lr_synth_path_group_list

    foreach path_group $lr_synth_path_group_list {
      puts $path_group
      set path_group_rpt_file "${lr_synth_rpt_out}/timing/$path_group"
      timing_report $path_group $path_group_rpt_file $lr_synth_sta_paths_per_group
    }

    exit

Here we have variables (which are in some sense parameters, since they
occur free), a loop, and sequencing, but no conditionals.  There’s
technically an assignment in the loop but the mutation to that
variable is kind of nonessential.  However, since it’s almost purely a
sequence, mutation is the only way for it to do anything useful.

Tcl and shell are both very easy to get started with, like keyboard
macros, but very bug-prone and kind of hard to understand.

### m4 ###

Speaking of which, what does typical m4 look like?  Here’s part of the
autoconfig script for an old version of libart:

    dnl AM_PATH_LIBART([MINIMUM-VERSION, [ACTION-IF-FOUND [, ACTION-IF-NOT-FOUND]]])
    dnl Test for LIBART, and define LIBART_CFLAGS and LIBART_LIBS
    dnl
    AC_DEFUN([AM_PATH_LIBART],
    [dnl 
    dnl Get the cflags and libraries from the libart-config script
    dnl
    AC_ARG_WITH(libart-prefix,[  --with-libart-prefix=PFX   Prefix where LIBART is installed (optional)],
                libart_prefix="$withval", libart_prefix="")
    AC_ARG_WITH(libart-exec-prefix,[  --with-libart-exec-prefix=PFX Exec prefix where LIBART is installed (optional)],
                libart_exec_prefix="$withval", libart_exec_prefix="")
    AC_ARG_ENABLE(libarttest, [  --disable-libarttest       Do not try to compile and run a test LIBART program],
                        , enable_libarttest=yes)

m4 is a templating language with dangerous delusions of grandeur,
capable of not only Turing-complete computation but higher-order
programming; but, as you can see, autoconf has managed to build its
own castle on that swamp, turning m4 into an entirely separate
programming language.  Unfortunately I don’t know enough about
autoconf to know what those ugly names mean and how they work
together.

I probably *should* have included PHP but I don’t have anything that I
think is “typical PHP” code handy.

### Forth ###

Unfortunately I don't have a lot of confidence that this represents
“typical” Forth, but it’s one of the few Forth programs I’ve actually
used and didn’t write:

    \ tt.pfe        Tetris for terminals, redone in ANSI-Forth.
    \               Written 05Apr94 by Dirk Uwe Zoller,
    \                       e-mail duz@roxi.rz.fht-mannheim.de.
    \               Look&feel stolen from Mike Taylor's "TETRIS FOR TERMINALS"
    \
    \               Please copy and share this program, modify it for your system
    \               and improve it as you like. But don't remove this notice.
    \ ...

    : draw-pit      \ --- ; draw the contents of the pit
                    deep 0 do  i draw-line  loop ;

    : show-key      \ char --- ; visualization of that character
                    dup bl <
                    if  [char] @ or  [char] ^ emit  emit  space
                    else  [char] ` emit  emit  [char] ' emit
                    then ;

    : show-help     \ --- ; display some explanations
                    30  1 at-xy ." ***** T E T R I S *****"
                    30  2 at-xy ." ======================="
                    30  4 at-xy ." Use keys:"
                    32  5 at-xy left-key    show-key ."  Move left"
    \ ...
                    ;

    : update-score  \ --- ; display current score
                    38 16 at-xy score @ 3 .r
                    38 17 at-xy pieces @ 3 .r
                    38 18 at-xy levels @ 3 .r ;


Here we have three subroutines, one of which takes a parameter; they
contain a conditional and a loop; they invoke primitives like `@`,
`or`, `[char]`, and `emit`.  This excerpt barely uses variables,
`score`, `pieces`, and `levels`; `i` is not really a variable, though
it’s variable-like.  The parameter to `show-key` is not a variable.
`deep` and `left-key` are constants.  There’s a little arithmetic (on
ASCII codes for keys).  There are lots of places where one subroutine
invokes another; `draw-line` and `show-key` are parts of the Tetris
game.  `at-xy` comes with PFE.

I think this program uses less variables and longer subroutines than
is typical for Forth, but it shows how you can use high-level Forth
words to script at whatever level is comfortable for your application.

What do these things look like compiled?
----------------------------------------

The execution model for all of the above, except m4, are actually
fairly similar.  They’re eager imperative languages, equipped with
closed subroutines and primitive facilities for arithmetic and
constructing and accessing composite data structures.  They’re all
equipped with textual namespaces to use for describing dataflow
connections by connascence of name.  Though not all the control flow
shown above is single-entry single-exit, it *is* all “structured” in
the truer sense.  None of them have pattern matching or strong static
type checking, much less dependent types.  None of them (except m4)
have an outlandish execution model like Prolog, Erlang, Haskell,
Miranda, SNOBOL, or Icon, although Python and Lua do have one or
another kind of coroutine, and most of them can use threads.

There are some major practical differences.  Python lists don’t
support efficient FP-persistent incremental construction like my
initial example from Ur-Scheme used, and we lack garbage collection
entirely in C, C++, and Forth.  JS supports higher-order functions
with closures, a feature pioneered in Scheme but missing from C, C++,
Forth, and Elisp, and much less used in the other languages than in JS
and perhaps Lua.  Elisp, C, C++, Forth, Java, and Scheme don’t support
the effortless digraph-of-dictionaries-referencing-each-other memory
structure that characterizes Python, Perl, Lua, and JS, so I had to
write `(caar symlist)` instead of the more transparent `sym.name`.
Tcl, m4, and the Bourne shell don’t support references at all, except
by name.

Their scoping differs — Elisp has a single global namespace where it
temporarily binds local variables; Scheme has a single global
namespace and then lexically-nested block scopes within it; C has
three nested kinds of namespace (extern, file-static, and block scope,
which nests arbitrarily); Forth word scopes extend from declarations
forward until something hides the declaration, such as a change of
wordlist; and there are nested hierarchical namespaces in JS, Lua,
Java, Perl, and Python.  (I forget how scoping works in Tcl and m4.)
But for the most part these scoping differences disappear before
execution time.

Elisp, Forth, Scheme, Tcl, the Bourne shell, m4, and C don’t have a
concept of “object scope”, “class scope”, or “methods”, while Java,
Python, C++, JS, Lua, and Perl all have varying concepts.  All of
these languages have some way to invoke a function whose identity is
not known until runtime, although in Tcl and the Bourne shell this is
done with a string referencing a function in the global namespace, and
in C you have to do extra work to invoke a *closure*.  Java and C++
mostly treat objects as primary and methods as mere details of
objects, leading to things like the `Callable` interface, while
functions are first-class objects in Elisp, Scheme, Python, JS, Lua,
and Perl.

But most of these differences are sort of details.

Consider that initial example:

    (define interned-symbol-list '())
    (define (intern symbol)
      (interning symbol interned-symbol-list))
    (define (interning symbol symlist)
      (cond ((null? symlist) 
             ;; XXX isn't this kind of duplicative with the global variables stuff?
             (set! interned-symbol-list 
                   (cons (list symbol (new-label)) interned-symbol-list))
             (car interned-symbol-list))
            ((eq? symbol (caar symlist)) (car symlist))
            (else (interning symbol (cdr symlist)))))
    (define (symbol-value symbol) (cadr (intern symbol)))

We can translate this into Elisp as follows:

    (defvar interned-symbol-list '())

    (defun ur-intern (symbol)
      (interning symbol interned-symbol-list))

    (defun new-label ()
      (gensym))

    (defun interning (symbol symlist)
      (cond ((null symlist) 
             (setq interned-symbol-list 
                   (cons (list symbol (new-label)) interned-symbol-list))
             (car interned-symbol-list))
            ((eq symbol (caar symlist))
             (car symlist))
            (t
             (interning symbol (cdr symlist)))))

    (defun ur-symbol-value (symbol)
      (cadr (ur-intern symbol)))

This byte-compiles as follows, with the unprintable bytes removed:

    (defalias 'ur-intern #[(symbol) "(redacted)"
                           [symbol interned-symbol-list interning] 3])
    (defalias 'new-label #[nil "(redacted)" [gensym] 1])
    (defalias 'interning
      #[(symbol symlist) "(redacted)"
        [symlist symbol interned-symbol-list x new-label interning]
        4])
    (defalias 'ur-symbol-value #[(symbol) "(redacted)"
                                 [symbol x ur-intern] 3])

The redacted bytecodes disassemble as follows:

    byte code for ur-intern:
      args: (symbol)
    0       constant  interning
    1       varref    symbol
    2       varref    interned-symbol-list
    3       call      2
    4       return    

    byte code for new-label:
      args: nil
    0       constant  gensym
    1       call      0
    2       return    

Those two are very simple, just some eager nested expressions.
But `interning` contains conditionals, and a recursive loop,
although its tail-call nature is not visible in the bytecode:

    byte code for interning:
      args: (symbol symlist)
    0       varref    symlist
    1       goto-if-not-nil 1                 ; forward jump past the first cond case; note the double negation
    4       varref    symbol
    5       constant  new-label
    6       call      0
    7       list2                             ; build a 2-item list
    8       varref    interned-symbol-list
    9       cons      
    10      dup                               ; one reference for the variable, the other for return value
    11      varset    interned-symbol-list
    12      car       
    13      return    
    14:1    varref    symbol                  ; second case:
    15      varref    symlist
    16      dup       
    17      varbind   x                       ; note, not varset; this creates a local binding
    18      car                               ; `caar` compiles into two successive `car` bytecodes
    19      car       
    20      unbind    1                       ; discard useless x binding
    21      eq        
    22      goto-if-nil 2                     ; jump to the else
    25      varref    symlist
    26      car       
    27      return    
    28:2    constant  interning               ; set up the recursive call
    29      varref    symbol
    30      varref    symlist
    31      cdr                               ; reduce toward the base case
    32      call      2
    33      return    

`max-lisp-eval-depth` defaults to 500, and it does kill functions
like this in my version of Emacs when they tail-recurse too
deeply, whether byte-compiled or not.  That is, Elisp doesn’t
have tail-call elimination as Ur-Scheme does.

If you want a loop in Elisp, you need to use an explicit looping
construct, such as `while`, which gets compiled to
`goto-if-not-nil` bytecodes like the ones above, just backwards
instead of forwards.

    byte code for ur-symbol-value:
      args: (symbol)
    0       constant  ur-intern
    1       varref    symbol
    2       call      1
    3       dup       
    4       varbind   x
    5       cdr       
    6       car       
    7       unbind    1
    8       return    

Except for the special forms `define`, `cond`, and `setq`, the Lisp
source makes no distinction between primitive operations like `cdr`
and `null`, one one hand, and invocations of ordinary functions like
`interning` and `new-label`, on the other.  But the bytecode compiler
certainly does, as an efficiency hack; it has special bytecodes for
the basic Lisp functions (in this case, `list`, `cons`, `car`, `eq`,
`null` (merged with the `cond`), and `cdr`), as well as lots of
Emacs-specific operations like `save-excursion`, `forward-char`,
`insert`, and `forward-word`, which don’t occur here.  This makes the
bytecode very compact, though it still carries around a “constant
vector” for opcodes like `constant` and `varref` to index into.  It
just doesn’t have to indirect through the constant vector and look up
a function binding every time you invoke `car`, so it runs about four
times faster.